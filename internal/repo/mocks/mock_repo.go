// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ContainsAlias mocks base method.
func (m *MockRepository) ContainsAlias(ctx context.Context, alias string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsAlias", ctx, alias)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsAlias indicates an expected call of ContainsAlias.
func (mr *MockRepositoryMockRecorder) ContainsAlias(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsAlias", reflect.TypeOf((*MockRepository)(nil).ContainsAlias), ctx, alias)
}

// ContainsUrl mocks base method.
func (m *MockRepository) ContainsUrl(ctx context.Context, url string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsUrl", ctx, url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ContainsUrl indicates an expected call of ContainsUrl.
func (mr *MockRepositoryMockRecorder) ContainsUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsUrl", reflect.TypeOf((*MockRepository)(nil).ContainsUrl), ctx, url)
}

// CreateUrl mocks base method.
func (m *MockRepository) CreateUrl(ctx context.Context, url, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrl", ctx, url, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUrl indicates an expected call of CreateUrl.
func (mr *MockRepositoryMockRecorder) CreateUrl(ctx, url, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrl", reflect.TypeOf((*MockRepository)(nil).CreateUrl), ctx, url, alias)
}

// GetUrl mocks base method.
func (m *MockRepository) GetUrl(ctx context.Context, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl", ctx, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockRepositoryMockRecorder) GetUrl(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockRepository)(nil).GetUrl), ctx, alias)
}
